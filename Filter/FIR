-- V1.0a AR

generic = {

  calcFilter = function(fs, fa, fb, m, att)
    --[[
     * This function calculates Kaiser windowed
     * FIR filter coefficients for a single passband
     * based on
     * "DIGITAL SIGNAL PROCESSING, II" IEEE Press pp 123-126.
     *
     * Fs = Sampling frequency
     * Fa = Low freq ideal cut off (0 = low pass)
     * Fb = High freq ideal cut off (fs/2 = high pass)
     * Att = Minimum stop band attenuation (> 21dB)
     * N = Number of points in filter (ODD number)
     * H[] holds the output coefficients (they are symetric only half generated)
    --]]

    local sqr = function(x) return x * x end

    ino = function(x)
      -- This function calculates the zeroth order Bessel function
      local d = 0
      local ds = 1.0
      local s = 1.0
      repeat
        d = d + 2
        ds = ds * (sqr(x) / sqr(d))
        s = s + ds
      until ds < s * 1E-6
      return s
    end

    local np = math.floor((m - 1) / 2)

    -- Calculate the impulse response of the ideal filter
    local a = {}
    a[0] = 2 * (fb - fa) / fs
    for j = 1, np do
      a[j] = (math.sin(2 * j * math.pi * fb / fs) - math.sin(2 * j * math.pi * fa / fs)) / (j * math.pi)
    end
    -- Calculate the desired shape factor for the Kaiser-Bessel window
    if att < 21.0 then
      alpha = 0.0
    elseif att > 50.0 then
      alpha = 0.1102 * (att - 8.7)
    else
      alpha = 0.5842 * math.pow((att - 21.0), 0.4) + 0.07886 * (att - 21.0)
    end
    -- Window the ideal response with the Kaiser-Bessel window
    inoAlpha = ino(alpha)
    local h = {}
    for j = 0, np do
      local ht = a[j] * ino(alpha * math.sqrt(1 - (sqr(j) / sqr(np)))) / inoAlpha
      h[np - j + 1] = ht
      h[np + j + 1] = ht
    end
    return h
  end,

  parameter = {
    fs = 10,
    fa = 0.0,
    fb = 1.0,
    m = 37,
    att = 60,0,
  },

  init = function(self)
    block.setInputsPinCount(1)
    block.setOutputsPinCount(1)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  set = function(self)
    gui.set('EditFS', 'Number', self.parameter.fs)
    gui.set('EditFA', 'Number', self.parameter.fa)
    gui.set('EditFB', 'Number', self.parameter.fb)
    gui.set('EditM', 'Integer', self.parameter.m)
    gui.set('EditAtt', 'Number', self.parameter.att)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'FIR', [[
This calculates Kaiser windowed FIR filter coefficients for a single passband.
Based on "DIGITAL SIGNAL PROCESSING, II" IEEE Press pp 123-126.

Fs = Sampling frequency
Fa = Low freq ideal cut off (0 = low pass)
Fb = High freq ideal cut off (fs/2 = high pass)
Att = Minimum stop band attenuation (> 21dB)
N = Number of points in filter (ODD number)

]])
    gui.add('Edit', 'EditFS', 'Fs [Hz]')
    gui.add('Edit', 'EditFA', 'Fa [Hz]')
    gui.add('Edit', 'EditFB', 'Fb [Hz]')
    gui.add('Edit', 'EditM', 'M (odd!) [n]')
    gui.add('Edit', 'EditAtt', 'Att (>21) [db]')
    self:set()
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.fs = gui.get('EditFS', 'Number')
    self.parameter.fa = gui.get('EditFA', 'Number')
    self.parameter.fb = gui.get('EditFB', 'Number')
    self.parameter.m = gui.get('EditM', 'Integer')
    if self.parameter.m & 1 == 0 then
      self.parameter.m = self.parameter.m + 1
    end
    self.parameter.att = gui.get('EditAtt', 'Number')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x50, "'FIR'")
  end,

  generate = function(self)
    local source =
      [==[
      local block = {}

        block.start = function()
          block.i = 1
          block.h = {H}
          block.a = {}
          for i = 1, M do
            block.a[i] = 0.0
          end
        end

        block.step = function(a)
          block.a[block.i] = a
          block.i = block.i + 1
          if block.i > M then
            block.i = 1
          end
          local q = 0.0
          for i = 1, M do
            q = q + block.h[i] * block.a[i]
          end
          return q
        end

      return block
      ]==]
    local h = self.calcFilter(self.parameter.fs, self.parameter.fa, self.parameter.fb, self.parameter.m, self.parameter.att)
    local replaces = {
      ['M'] = self.parameter.m,
      ['H'] = table.concat(h, ', ')
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

