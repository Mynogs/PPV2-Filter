-- V1.0a AR
-- 30.12.2016 10:45:48 AR V1.0b
-- 16.07.2017 11:31:13 AR V1.0c

generic = {
  parameter = {
    samples = 10,
  },

  init = function(self)
    block.setInputsPinCount(1)
    block.setOutputsPinCount(1)
    block.modifyFlags('SupressStartFunctionCall', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Floating avarage', 'Avarage of a number of samples')
    gui.add('Edit', 'EditSamples', 'Number of samples')
    gui.set('EditSamples', 'Integer', self.parameter.samples)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.samples = math.max(gui.get('EditSamples', 'Integer'), 1)
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x50, "'\\xD1\\x84' .. " .. self.parameter.samples)
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.step = function(a)
          if not block.samples then
            block.samples = {}
            for i = 1, SAMPLES do
              block.samples[i] = a
            end
            block.samplesP = 1
          end
          block.samples[(block.samplesP - 1) % SAMPLES + 1] = a
          block.samplesP = block.samplesP + 1
          local q = 0.0
          for i = 1, SAMPLES do
            q = q + block.samples[i]
          end
          return q / SAMPLES
        end

        return block
      ]==]
    local replaces = {
      ['SAMPLES'] = self.parameter.samples
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

